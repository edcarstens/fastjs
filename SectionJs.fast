//.#-*-Javascript-*-
//.+fast
//Extend Section for Javascript
//-----------------------------

//.class SecJs(Section):{
//. def create(self, x='', parent=None):{
//.  return SectionJs(x, parent)
//. }
//. def __init__(self, x='', parent=None):{
//.  super(SecJs, self).__init__(x, parent)
//. }
//.}

//.class SectionJs(Section):{
//. def create(self, x='', parent=None):{
//.  return SectionJsMethod(x, parent)
//. }
//. def __init__(self, x='', parent=None):{
//.  super(SectionJs, self).__init__(x, parent)
//.  self.constructor = SectionJsConstructor(self.section + ' constructor', self)
//.  self.c = self.constructor  ## aliased for less typing
//.#  self.body = Section(self.section + ' body', self)
//. }
//.}

//.class SectionJsConstructor(Section):{
//. def __init__(self, x='', parent=None):{
//.  super(SectionJsConstructor, self).__init__(x, parent)
//.  self._args = SectionJsConstructorArgs(self.section + ' _args', self)
//.  self.args = SectionJsConstructorArgs(self.section + ' args', self)
//. }
//. def __call__(self, initObjVars=True):{
//.#  print('setting initObjVars=')
//.#  print(initObjVars)
//.  self._args(initObjVars)
//.  return self
//. }
//. def process(self):{
//.  buf = ''
//.  noOpenParen = True
//.  noCloseParen = True
//.  for line in self.getLines():{
//.### //. ###
//.   m1 = re.match(fast.codePrefix, line)
//.   if (m1):{
//.    buf += line + fast.newline
//.   }
//.   else:{
//.### strip leading space ###
//.    m1 = re.match(r'^(\s*)(.*)', line)
//.    leadSpace = m1.group(1)
//.    if (len(leadSpace) >= 4):{ ## 4 space indent exists already
//.     leadSpace = leadSpace[4:]
//.    }
//.    linem = m1.group(2)
//.### constructor( ###
//.    m1 = re.match(r'^(.*)\((.*)', linem) ## (
//.    m2 = re.match(r'^.*\)', linem) ## )
//.    if (noOpenParen and m1):{
//.     buf += 'constructor(' + m1.group(2) + fast.newline
//.     buf += "//.+fast['" + self.section + "']._args" + fast.newline
//.     noOpenParen = False
//.    }
//.    elif (noCloseParen and m2):{
//.     buf += "//.fast['" + self.section + "'].args > ''" + fast.newline
//.     buf += "//.-fast['" + self.section + "']._args" + fast.newline
//.     buf += "    //.fast['" + self.section + "']._args.chomp > ''" + fast.newline
//.     buf += linem + fast.newline
//.     buf += "    //.fast['" + self.section + "']._prebody > ''" + fast.newline
//.     noCloseParen = False
//.    }
//.    else:{
//.     buf += leadSpace + linem + fast.newline
//.    }
//.   } # else
//.  } # for line
//.  self.setText(buf)
//. } # def process
//. def __neg__(self):{
//.  super(SectionJsConstructor, self).__neg__() > ''
//.  return self
//. }
//.}

//.class SectionJsConstructorArgs(Section):{
//. def __init__(self, x='', parent=None):{
//.  super(SectionJsConstructorArgs, self).__init__(x, parent)
//.  self.argDefaults = {}
//.  self.buf = ''
//.  self.initObjVars = True
//. }
//. def __call__(self, initObjVars=True):{
//.  self.initObjVars = initObjVars
//.  return self
//. }
//. def process(self):{
//.  for line in self.getLines():{
//.   m1 = re.match(r'^\s*(\w+)\s*=\s*(\S+)\s*,(\s*/*.*)', line)
//.   m2 = re.match(r'^\s*(\w+)\s*,(\s*/*.*)', line)
//.   if (m1 and self.initObjVars):{
//.    v = m1.group(1) ## variable name
//.    d = m1.group(2) ## default value
//.    c = m1.group(3) ## line comments
//.#    self.buf += v + ',' + c + fast.newline
//.    self.buf += v + '=' + d + ',' + c + fast.newline
//.    self.argDefaults[v] = d
//.    +self.parent._prebody
//.## this.@v@ = (@v@ === undefined) ? @d@ : @v@
this.@v@ = @v@
//.    -self.parent._prebody
//.   }
//.   elif (m2 and self.initObjVars):{
//.    v = m2.group(1) ## variable name
//.    c = m2.group(2) ## line comments
//.    self.buf += v + ',' + c + fast.newline
//.    +self.parent._prebody
this.@v@ = @v@
//.    -self.parent._prebody
//.   }
//.   else:{
//.    self.buf += line + fast.newline
//.   }
//.  } # for line
//.  self.setText('')
//. } # def process
//. def processFinal(self):{
//.  self.setText(self.buf)
//. }
//.}

//.class SectionJsMethod(Section):{
//. def __init__(self, x='', parent=None):{
//.  super(SectionJsMethod, self).__init__(x, parent)
//.  self._args = SectionJsMethodArgs(self.section + ' _args', self)
//.  self.args = SectionJsMethodArgs(self.section + ' args', self)
//.  self.enableMethod = False
//. }
//. def __call__(self, *args):{
//.  self.enableMethod = True
//.  return self
//. }
//. def process(self):{
//.  if (not self.enableMethod):{
//.   return
//.  }
//.  buf = ''
//.  noOpenParen = True
//.  noCloseParen = True
//.  for line in self.getLines():{
//.### //. ###
//.   m1 = re.match(fast.codePrefix, line)
//.   if (m1):{
//.    buf += line + fast.newline
//.   }
//.   else:{
//.### strip leading space ###
//.    m1 = re.match(r'^(\s*)(.*)', line)
//.    leadSpace = m1.group(1)
//.    if (len(leadSpace) >= 4):{ ## 4 space indent exists already
//.     leadSpace = leadSpace[4:]
//.    }
//.    linem = m1.group(2)
//.### async or * ###
//.    m1 = re.match(r'^([as]?)([\*g]?)(\s*\(.*)', linem)
//.    if (m1):{
//.     async = ''
//.     gen = ''
//.     if (m1.group(1) == 'a'):{
//.      async = 'async '
//.     }
//.     if (m1.group(2)):{
//.      gen = '*'
//.     }
//.     linem = async + gen + m1.group(3)
//.    }
//.### method( ###   TODO: allow more syntax forms for (arg1,arg2)
//.    m1 = re.match(r'^(.*)\((.*)', linem) ## (
//.    m2 = re.match(r'^.*\)', linem) ## )
//.    newParen = False
//.    if (noOpenParen and m1):{
//.     buf += m1.group(1) + self.section.split()[-1] + '(' + m1.group(2) + fast.newline
//.     buf += "//.+fast['" + self.section + "']._args" + fast.newline
//.     noOpenParen = False
//.     newParen = True
//.    }
//.    if (noCloseParen and m2):{
//.     buf += "//.fast['" + self.section + "'].args > ''" + fast.newline
//.     buf += "//.-fast['" + self.section + "']._args" + fast.newline
//.     buf += "    //.fast['" + self.section + "']._args.chomp > ''" + fast.newline
//.     buf += linem + fast.newline
//.     buf += "    //.fast['" + self.section + "']._prebody > ''" + fast.newline
//.     noCloseParen = False
//.     newParen = True
//.    }
//.#    else:{
//.    if (not newParen):{
//.     buf += leadSpace + linem + fast.newline
//.    }
//.   } # else
//.  } # for line
//.  self.setText(buf)
//. } # def process
//. def __neg__(self):{
//.  super(SectionJsMethod, self).__neg__()
//.  if (self.enableMethod):{
//.   self > ''
//.  }
//.  return self
//. }
//.}

//.class SectionJsMethodArgs(Section):{
//. def __init__(self, x='', parent=None):{
//.  super(SectionJsMethodArgs, self).__init__(x, parent)
//.  self.argDefaults = {}
//.  self.buf = ''
//. }
//. def process(self):{
//.  for line in self.getLines():{
//.   m1 = re.match(r'^\s*(\w+)\s*=\s*(\S+)\s*,(\s*/*.*)', line)
//.   m2 = re.match(r'^\s*(\w+)\s*,(\s*/*.*)', line)
//.   if (m1):{
//.    v = m1.group(1) ## variable name
//.    d = m1.group(2) ## default value
//.    c = m1.group(3) ## line comments
//.#    self.buf += v + ',' + c + fast.newline
//.    self.buf += v + '=' + d + ',' + c + fast.newline
//.    self.argDefaults[v] = d
//.#    +self.parent._prebody
//.## @v@ = (@v@ === undefined) ? @d@ : @v@
//.#    -self.parent._prebody
//.   }
//.   elif (m2):{
//.    v = m2.group(1) ## variable name
//.    c = m2.group(2) ## line comments
//.    self.buf += v + ',' + c + fast.newline
//.   }
//.   else:{
//.    self.buf += line + fast.newline
//.   }
//.  } # for line
//.  self.setText('')
//. } # def process
//. def processFinal(self):{
//.  self.setText(self.buf)
//. }
//.}

//.class caseClass(object):{
//. def __init__(self, parent, section):{
//.  self.parent = parent
//.  self.section = section
//.  self.item = None
//. }
//. def __call__(self, item=None):{
//.  self.item = item
//.  return self
//. }
//. def __pos__(self):{
//.  +getattr(self.parent, self.section)
//.  if (self.item == None):{
default: {
//.  }
//.  else:{
case "@self.item@": {
//.  }
//.  fast >> 2
//.  return self
//. }
//. def __neg__(self):{
//.  if (self.item != None):{
  break
}
//.  }
//.  fast << 2
//.  -getattr(self.parent, self.section)
//.  return self
//. }
//.}

//.secjs = SecJs('secjs') # global top section object for creating SectionJs objects

//.-fast

//.if (0):{
// TESTING //
//.#banana = SectionJs('banana')
//.banana = sec.banana('banana.js')
//.#this = +banana('banana.js')
//.this = +banana
class banana {
    //.+this.c(1)
    ({
     aa,
     bb=22,
    }) {
        this.halt = false
    }
    //.-this.c

    //.+this.apple
    ag({
     x,
     y=2, // y comments
     z,
    }) {
        // body of apple method (@this.apple.section@)
        //.this.apple > 'body1'
    }
    //.-this.apple

    //.+this.pear  ## test no args
    ({
    }) {
        // body
    }
    //.-this.pear
}
//.-this
//.}

//.if (0):{
//.+banana.apple.args
a=3, // a comments
b=5, // b comments
//.-banana.apple.args
//.+banana.apple.body1
return (a+b)
//.-banana.apple.body1
//.}

//.if (0):{
---
@banana.apple.text@
---
//.}
//.#fast.writeFiles()
